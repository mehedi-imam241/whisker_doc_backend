# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: String!
  name: String!
  email: String!
  avatar: String
  role: String!
}

type SearchResponse {
  Drug: String!
  Use: String!
}

type Blog {
  _id: String!
  title: String!
  body: String!
  author: User
}

type ServerResponse {
  message: String!
}

type LoginResponseDto {
  user: User!
  accessToken: String!
}

type plan {
  id: String!
  object: String!
  active: Boolean!
  amount: Float!
}

type StatusOutput {
  id: String!
  object: String!
  currency: String!
  current_period_end: Float!
  current_period_start: Float!
  customer: String!
  plan: plan!
}

type Appointment {
  _id: String!
  type: String!
  date: DateTime!
  slot_id: Float!
  petId: String!
  ownerId: String!
  vetId: String!
  pet: Pet
  owner: User
  vet: User
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Pet {
  _id: String!
  name: String!
  avatar: String
  species: String!
  breed: String!
  gender: String!
  age: Float!
  weight: Float!
  owner: User!
  appointments: [Appointment!]!
}

type CreateAppointmentSlot {
  idx: Float!
}

type CreateAllAppointmentSlots {
  slots: [CreateAppointmentSlot!]
}

type Appointment_Slot {
  _id: String!
  slots: CreateAllAppointmentSlots
  vetId: String!
  vet: User
}

type ArrayOfNumbersResponse {
  ids: [Float!]
}

type VetVerification {
  _id: String!
  vetId: String!
  vet: User
  certificateId: String!
  certificateLink: String!
  verified: Boolean!
}

type Review {
  _id: String!
  userId: String!
  review: String!
}

type Medicine {
  name: String!
  dose: String!
  duration: Float!
}

type Prescription {
  _id: String!
  createdAt: DateTime!
  petId: String!
  vetId: String!
  symtoms: [String!]!
  diseases: [String!]!
  medicines: [Medicine!]!
}

type Slots {
  _id: String!
  starts_at: String!
  ends_at: String!
  occupiedByUser: String
  dateScheduleId: String!
  dateSchedule: Date_schedule
}

type Date_schedule {
  _id: String!
  date: DateTime!
  homeServiceId: String!
  homeService: HomeService
  slots: [Slots!]
}

type HomeService {
  _id: String!
  vetId: String!
  vet: User
  date_schedule: [Date_schedule!]
}

type Symptoms {
  _id: String!
  species: String!
  vetId: String!
  verifiedBy: String
  title: String!
  article: String!
}

type Query {
  searchDrug(query: String!): [SearchResponse!]!
  getVet(id: String!): User!
  getVets(limit: Float!, skip: Float!): [User!]!
  getVetsCount: Float!
  getBlogs(take: Float!, skip: Float!): [Blog!]!
  getBlogById(id: String!): Blog!
  countPages: Float!
  getSubscriptionStatus: StatusOutput!
  getAllPets: [Pet!]!
  getPetById(id: String!): Pet!
  getAllAppointmentsOfVet: [Appointment!]!
  getAllAppointmentsOfVetToday(type: String!): [Appointment!]!
  getAppointmentOfPet(petId: String!): Appointment!
  getAppointmentSlotsOfVet(vetId: String!): Appointment_Slot
  FindSlotsThatAreNotBooked(date: DateTime!, vetId: String!): ArrayOfNumbersResponse
  getVerificationRequestsAdmin(limit: Float!, skip: Float!): [VetVerification!]!
  getVerificationStatus: ServerResponse!
  getReviews(limit: Float!, skip: Float!): [Review!]!
  getReviewsOfVet(limit: Float!, skip: Float!): [Review!]!
  getPrescriptionByPetId(limit: Float!, skip: Float!, petId: String!): [Prescription!]!
  getHomeServiceVets(limit: Float!, skip: Float!): [HomeService!]!
  searchSymptoms(searchTerm: String!): [Symptoms!]!
  getVerfiedSymptoms(limit: Float!, skip: Float!): [Symptoms!]!
  getUnverfiedSymptoms(limit: Float!, skip: Float!): [Symptoms!]!
}

type Mutation {
  createBlog(input: CreateBlogInput!): ServerResponse!
  login(loginInput: LoginInput!): LoginResponseDto!
  register(input: RegisterInput!): User!
  createSubscription: ServerResponse!
  resumeSubscription: ServerResponse!
  createPet(input: CreatePetInput!): ServerResponse!
  bookAppointment(input: BookAppointmentInput!): ServerResponse!
  cancelAppointment(appointmentId: String!): ServerResponse!
  CreateSlots(input: CreateAllAppointmentSlotsInput!): ServerResponse!
  updateAppointmentSlot(input: CreateAllAppointmentSlotsInput!): ServerResponse!
  createVerificationRequest(input: VerificationRequestInput!): ServerResponse!
  verifyVet(vetId: String!): ServerResponse!
  createReview(review: String!): ServerResponse!
  createReviewOfVet(review: String!, vetId: String!): ServerResponse!
  createPrescription(input: CreatePrescription!): Prescription!
  JoinHomeService: ServerResponse!
  verifySymptoms(symptomsId: String!): ServerResponse!
  createSymptoms(input: CreateSymptomsInput!): ServerResponse!
}

input CreateBlogInput {
  title: String!
  body: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  name: String!
  email: String!
  avatar: String
  password: String!
  role: Role!
}

enum Role {
  ADMIN
  USER
  VET
  PARAVET
}

input CreatePetInput {
  name: String!
  avatar: String
  species: String!
  breed: String!
  gender: Gender!
  age: Float!
  weight: Float!
}

enum Gender {
  MALE
  FEMALE
}

input BookAppointmentInput {
  date: DateTime!
  slot_id: Float!
  type: AppointmentType!
  petId: String!
  vetId: String!
}

enum AppointmentType {
  ONLINE
  INPERSON
}

input CreateAllAppointmentSlotsInput {
  slots: [CreateAppointmentSlotInput!]!
}

input CreateAppointmentSlotInput {
  idx: Float!
}

input VerificationRequestInput {
  certificateId: String!
  certificateLink: String
}

input CreatePrescription {
  petId: String!
  symtoms: [String!]!
  diseases: [String!]!
  medicines: [MedicineInput!]!
}

input MedicineInput {
  name: String!
  dose: String!
  duration: Float!
}

input CreateSymptomsInput {
  species: String!
  title: String!
  article: String!
}